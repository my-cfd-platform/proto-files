
syntax = "proto3";
package cross_margin_engine;
import "google/protobuf/empty.proto";

enum CrossMarginEngineResponseCode{
    Success = 0;
}


enum CrossMarginPositionOperation{
    Buy = 0;
    Sell = 1;
}


message PositionBidAsk{
    string Symbol = 1;
    double Bid = 2;
    double Ask = 3;
    int64 Timestamp = 4;
}


message CrossMarginOrderGrpcModel{
    string TraderId = 1;
    string AccountId = 2;
    string Id = 3;
    string Instrument = 4;
    int64 Created = 5;

    optional double DesiredPrice = 6;

    optional int64 OpenedTimeStamp = 7;
    optional double OpenPrice = 8;
    CrossMarginPositionOperation Operation = 9;
    PositionBidAsk OpenBidAsk = 10;
    PositionBidAsk OpenCrossQuoteBidAsk = 11;
    double Lots = 12;

    optional double ClosePrice = 13;
    optional PositionBidAsk CloseBidAsk = 14;
    optional PositionBidAsk CloseCrossQuoteBidAsk = 15;
    optional int64 ClosedTimeStamp = 16;

    optional double TpInInstrumentPrice = 17;
    optional double TpInCurrency = 18;

    optional double SlInInstrumentPrice = 19;
    optional double SlInCurrency = 20;

    double Commission = 21;
    double Swap = 22;
    
}

message OpenCrossMarginPositionGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
    string Instrument = 3;
    double Lots = 4;
}


message CloseCrossMarginPositionGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
    string Id = 3;

}

message OpenCrossMarginPositionGrpcResponse{
    CrossMarginEngineResponseCode Status = 1;
    CrossMarginOrderGrpcModel Position = 2;
}

message CloseCrossMarginPositionGrpcResponse{
    CrossMarginEngineResponseCode Status = 1;
    CrossMarginOrderGrpcModel Position = 2;
}



message GetPendingPositionsGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
}


message GetActivePositionsGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
}

service CrossMarginEngineGrpcService{
    rpc OpenPosition(OpenCrossMarginPositionGrpcRequest) returns (OpenCrossMarginPositionGrpcResponse);
    rpc ClosePosition(CloseCrossMarginPositionGrpcRequest) returns (CloseCrossMarginPositionGrpcResponse);
    rpc GetPendingPositions(GetPendingPositionsGrpcRequest) returns (stream CrossMarginOrderGrpcModel);
    rpc GetActivePositions(GetActivePositionsGrpcRequest) returns (stream CrossMarginOrderGrpcModel);

    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}