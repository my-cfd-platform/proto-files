
syntax = "proto3";
package cross_margin_engine;
import "google/protobuf/empty.proto";

enum CrossMarginEngineResponseCode{
    Ok = 0;
    DayOff = 1;
    OperationIsTooLow = 2;
    OperationIsTooHigh = 3;
    MinOperationsByInstrumentViolated = 4;
    MaxOperationsByInstrumentViolated = 5;
    NotEnoughBalance = 6;
    NoLiquidity = 7;
    PositionNotFound = 8;
    TpIsTooClose = 9;
    SlIsTooClose = 10;
    AccountNotFound = 11;
    InstrumentNotFound = 12;
    InstrumentIsNotTradable = 13;
    HitMaxAmountOfPendingOrders = 14;
    TechError = 15;
    MultiplierIsNotFound = 16;
    TradingDisabled = 17;
    MaxPositionsAmount = 18;
    TradingGroupNotFound = 19;
    TradingProfileNotFound =20;
    TradingProfileInstrumentNotFound = 21;
    ABookReject = 22;
    ProcessIdDuplicate = 23;
}

enum CrossMarginPositionOperationGrpcModel{
    Buy = 0;
    Sell = 1;
}

message PositionBidAsk{
    string Symbol = 1;
    double Bid = 2;
    double Ask = 3;
    int64 Timestamp = 4;
}

message OrderPriceInformationGrpcModel{
    int64 TimeStamp = 7;
    double Price = 8;
    PositionBidAsk BidAsk = 10;
    PositionBidAsk CrossQuoteBidAsk = 11;
}

message CrossMarginOrderGrpcModel{
    string TraderId = 1;
    string AccountId = 2;
    string Id = 3;
    string Instrument = 4;
    int64 Created = 5;

    optional double DesiredPrice = 6;

    CrossMarginPositionOperationGrpcModel Operation = 7;

    double Lots = 8;
    int32 Leverage = 9;

    OrderPriceInformationGrpcModel OpenPrice = 10;
    OrderPriceInformationGrpcModel ClosePrice = 11;

    optional double TpInInstrumentPrice = 12;
    optional double TpInCurrency = 13;

    optional double SlInInstrumentPrice = 14;
    optional double SlInCurrency = 15;

    double Commission = 16;
    double Swap = 17;
    
}

message OpenCrossMarginPositionGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
    string Instrument = 3;
    double Lots = 4;
}

message CloseCrossMarginPositionGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
    string Id = 3;

}

message OpenCrossMarginPositionGrpcResponse{
    CrossMarginEngineResponseCode Status = 1;
    CrossMarginOrderGrpcModel Position = 2;
}

message CloseCrossMarginPositionGrpcResponse{
    CrossMarginEngineResponseCode Status = 1;
    CrossMarginOrderGrpcModel Position = 2;
}

message GetPendingPositionsGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
}

message GetActivePositionsGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
}

service CrossMarginEngineGrpcService{
    rpc OpenPosition(OpenCrossMarginPositionGrpcRequest) returns (OpenCrossMarginPositionGrpcResponse);
    rpc ClosePosition(CloseCrossMarginPositionGrpcRequest) returns (CloseCrossMarginPositionGrpcResponse);
    rpc GetPendingPositions(GetPendingPositionsGrpcRequest) returns (stream CrossMarginOrderGrpcModel);
    rpc GetActivePositions(GetActivePositionsGrpcRequest) returns (stream CrossMarginOrderGrpcModel);

    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}