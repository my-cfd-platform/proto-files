
syntax = "proto3";
package cross_margin_engine;
import "google/protobuf/empty.proto";

enum CrossMarginEngineClosePositionReason{
    TakeProfit = 0;
    StopLoss = 1;
    StopOut = 2;
    ClientCommand = 3;
    AdminCommand = 4;
}

enum CrossMarginEngineResponseCode{
    Ok = 0;
    DayOff = 1;
    OperationIsTooLow = 2;
    OperationIsTooHigh = 3;
    MinOperationsByInstrumentViolated = 4;
    MaxOperationsByInstrumentViolated = 5;
    NotEnoughBalance = 6;
    NoLiquidity = 7;
    PositionNotFound = 8;
    TpIsTooClose = 9;
    SlIsTooClose = 10;
    AccountNotFound = 11;
    InstrumentNotFound = 12;
    InstrumentIsNotTradable = 13;
    HitMaxAmountOfPendingOrders = 14;
    TechError = 15;
    MultiplierIsNotFound = 16;
    TradingDisabled = 17;
    MaxPositionsAmount = 18;
    TradingGroupNotFound = 19;
    TradingProfileNotFound =20;
    TradingProfileInstrumentNotFound = 21;
    ABookReject = 22;
    ProcessIdDuplicate = 23;
}

enum CrossMarginPositionOperationGrpcModel{
    Buy = 0;
    Sell = 1;
}

message PositionBidAsk{
    string Symbol = 1;
    double Bid = 2;
    double Ask = 3;
    uint64 Timestamp = 4;
}

message CrossMarginPositionGrpcModel{
    string TraderId = 1;
    string AccountId = 2;
    string Id = 3;
    string AssetPair = 4;
    CrossMarginPositionOperationGrpcModel Side = 5;
    double ContractSize = 6;
    double LotsAmount = 7;
    uint64 Created = 8;
    string ProcessIdCreate = 9;
    uint64 LastUpdateDate = 10;
    string LastUpdateProcessId = 11;
    string Base = 12;
    string Quote = 13;
    string Collateral = 14;

    optional double TpInProfit = 15;
    optional double SlInProfit = 16;
    optional double TpInAssetPrice = 17;
    optional double SlInAssetPrice = 18;
    map<string, string> Metadata = 19;

    string OpenProcessId = 20;
    uint64 OpenDate = 21;
    PositionBidAsk OpenBidAsk = 22;
    double OpenPrice = 23;
    PositionBidAsk ActiveBidAsk = 24;
    double ActivePrice = 25;
    PositionBidAsk MarginBidAsk = 26;
    double MarginPrice = 27;
    PositionBidAsk ProfitBidAsk = 28;
    double ProfitPrice = 29;
    double Profit = 30;
}

message CrossMarginClosedPositionGrpcModel{
    string TraderId = 1;
    string AccountId = 2;
    string Id = 3;
    string AssetPair = 4;
    CrossMarginPositionOperationGrpcModel Side = 5;
    double ContractSize = 6;
    double LotsAmount = 7;
    uint64 Created = 8;
    string ProcessIdCreate = 9;
    uint64 LastUpdateDate = 10;
    string LastUpdateProcessId = 11;
    string Base = 12;
    string Quote = 13;
    string Collateral = 14;

    optional double TpInProfit = 15;
    optional double SlInProfit = 16;
    optional double TpInAssetPrice = 17;
    optional double SlInAssetPrice = 18;
    map<string, string> Metadata = 19;

    string OpenProcessId = 20;
    uint64 OpenDate = 21;
    PositionBidAsk OpenBidAsk = 22;
    double OpenPrice = 23;
    PositionBidAsk ActiveBidAsk = 24;
    double ActivePrice = 25;
    PositionBidAsk MarginBidAsk = 26;
    double MarginPrice = 27;
    PositionBidAsk ProfitBidAsk = 28;
    double ProfitPrice = 29;
    double Profit = 30;

    string CloseProcessId = 31;
    uint64 CloseDate = 32;
    PositionBidAsk CloseBidAsk = 33;
    double ClosePrice = 34;
    CrossMarginEngineClosePositionReason CloseReason = 35;
}


message CrossMarginPendingOrderGrpcModel{
    string TraderId = 1;
    string AccountId = 2;
    string Id = 3;
    string AssetPair = 4;
    CrossMarginPositionOperationGrpcModel Side = 5;
    double ContractSize = 6;
    double LotsAmount = 7;
    uint64 Created = 8;
    string ProcessIdCreate = 9;
    uint64 LastUpdateDate = 10;
    string LastUpdateProcessId = 11;
    string Base = 12;
    string Quote = 13;
    string Collateral = 14;

    optional double TpInProfit = 15;
    optional double SlInProfit = 16;
    optional double TpInAssetPrice = 17;
    optional double SlInAssetPrice = 18;
    map<string, string> Metadata = 19;

    double DesirePrice = 20;
}

message OpenCrossMarginPositionGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
    string ProcessId = 3;
    string Instrument = 4;
    double Lots = 5;
    CrossMarginPositionOperationGrpcModel Operation = 6;
    optional double TpInCurrency = 7;
    optional double SlInCurrency = 8;
    optional double TpInAssetPrice = 9;
    optional double SlInAssetPrice = 10;
    
}

message CloseCrossMarginPositionGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
    string Id = 3;
    string ProcessId = 4;

}

message OpenCrossMarginPositionGrpcResponse{
    CrossMarginEngineResponseCode Status = 1;
    CrossMarginPositionGrpcModel Position = 2;
}

message CloseCrossMarginPositionGrpcResponse{
    CrossMarginEngineResponseCode Status = 1;
    CrossMarginClosedPositionGrpcModel Position = 2;
}

message GetPendingPositionsGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
}

message GetActivePositionsGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
}

message OpenCrossMarginPendingOrderGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
    string ProcessId = 3;
    string Instrument = 4;
    double Lots = 5;
    CrossMarginPositionOperationGrpcModel Operation = 6;
    double DesiredPrice = 7;
    optional double TpInCurrency = 8;
    optional double SlInCurrency = 9;
    optional double TpInAssetPrice = 10;
    optional double SlInAssetPrice = 11;
    
}

message OpenCrossMarginPendingOrderGrpcResponse{
    CrossMarginEngineResponseCode Status = 1;
    CrossMarginPendingOrderGrpcModel Order = 2;
}


message CancelCrossMarginPendingOrderGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
    string Id = 3;
}

message CancelCrossMarginPendingOrderGrpcResponse{
    CrossMarginEngineResponseCode Status = 1;
    CrossMarginPositionGrpcModel Order = 2;
}


message UpdateSlTpGrpcRequest{
    string TraderId = 1;
    string AccountId = 2;
    string Id = 3;
    optional double TpInCurrency = 4;
    optional double SlInCurrency = 5;
    optional double TpInAssetPrice = 6;
    optional double SlInAssetPrice = 7;
    string ProcessId = 8;
}

message UpdateTpSlResponse{
    CrossMarginEngineResponseCode Status = 1;
    CrossMarginPositionGrpcModel Position = 2;
}

service CrossMarginEngineGrpcService{
    rpc OpenPendingOrder(OpenCrossMarginPendingOrderGrpcRequest) returns (OpenCrossMarginPendingOrderGrpcResponse);
    rpc CancelPendingOrder(CancelCrossMarginPendingOrderGrpcRequest) returns (CancelCrossMarginPendingOrderGrpcResponse);
    rpc UpdateSlTp(UpdateSlTpGrpcRequest) returns (UpdateTpSlResponse);

    rpc OpenPosition(OpenCrossMarginPositionGrpcRequest) returns (OpenCrossMarginPositionGrpcResponse);
    rpc ClosePosition(CloseCrossMarginPositionGrpcRequest) returns (CloseCrossMarginPositionGrpcResponse);
    rpc GetPendingPositions(GetPendingPositionsGrpcRequest) returns (stream CrossMarginPendingOrderGrpcModel);
    rpc GetActivePositions(GetActivePositionsGrpcRequest) returns (stream CrossMarginPositionGrpcModel);

    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}